字符串:
在Python中，用引号括起来的都是字符串，其中的引号可以是单引号也可以是双引号
    "This is a string."
    'This is also a string.'

删除空白：
rstrip()剔除末尾的空白
lstrip()剔除开头的空白
strip()同时剔除字符串两边的空白
    favorite_language = ‘python '
    favorite_language.rstrip()

数中的下划线：使其更加清晰易读
universe_age = 14_000_000
当打印的时候，Python不会打印其中的下划线

列表
bicycles = ['trek','cannodale','redline','specialized']
print(bicycles[0])
  在列表末尾添加元素
    motorcycles.append('ducati')
  在列表中插入元素
    motorcycles。insert(0,'ducati')
  在列表中使用del语句删除元素
    del motorcycles[0]
  使用方法pop()删除元素，pop()删除列表末尾的元素，并且让你能够接着使用它。
    popped_motorcycle = motorcycles.pop()
  弹出列表中任何位置处的元素
    popped_motorcycle = motorcycles.pop(0)  或者使用del语句
  根据值来删除元素
    motorcycles.remove('ducati')   (remove函数只会删除第一个指定的值，若要删除的值出现多次，则需要使用循环)

列表排序
  使用sort()对列表永久排序 //此修改是永久的
    cars.sort()  //列表将按照字母顺序排列，与字母顺序相反则可以使用： car.sort(reverse=True)
  使用函数sorted()对列表临时排序 //同时不影响它们在列表中的原始排列顺序
    print(sorted(cars))
  倒着打印列表 //不是按照与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序
    cars.reverse()

确定列表的长度
  使用函数len()
  len(cars)

列表的切片
  print(players[0:3])

创建数值列表
  range(1,5)只打印数1~4

使用range()创建数字列表
  numbers = list(range(1,6)) ----> 结果是 [1,2,3,4,5]
  numbers = list(range(2,11,2)) ----> 结果是[2,4,6,8,10]

对数字执行简单的统计计算
  digits=[1,2,3,4,5,6,7,8,9,0]
  min(digits)  ---->找最小值
  max(digits)  ---->找最大值
  sum(digits)  ---->求列表总和

列表和元组
  列表非常适合用于储存在程序运行期间可能变化的数据集。列表是可以修改的，这对处理网站的用户列表或游戏中的
  角色列表至关重要。然而，有时候需要创建一系列不可修改的元素，元组可以满足这种需求。Python将不能修改的值
  称为 不可变 的，而不可变的列表被称为元组。

  元组看起来很像列表，但使用圆括号而非中括号来标识。定义元组后，就可以使用索引来访问其元素，就像访问列表
  元素一样

修改元组变量
  虽然不能修改元组的元素，但是可以给存储元组的变量赋值。
  dimensions = (200,50)
  dimensions = (400,100)


条件测试
  两个大小写不同的值被视为不相等

if 语句格式
  if conditional_test:
      do something

字典
  字典是一种动态结构，可随时在其中添加键值对。要添加键值对，可依次字典名，用方括号括起来的键和相关连的值
  例如：
      alien_0 = {'color':'green','point':5}

	  alien_0['x_position'] = 0
	  alien_0['y_position'] = 25

删除键值对
  del alien_0['points']

使用get()来访问值
  在一定情况下会出现指定的键不存在的情况，这时候可以使用get()函数来处理
    方法get()的第一个参数用于指定键，是必不可少的；第二个参数为指定的键不存在时返回的一个默认值。
	point_value = alien_0.get('points','No point value assigned.')

遍历字典

1.for key, value in user_0.items()    //key value 就是对应的键值表
2.for name in favourite_languages.keys()    //name 就是所有的键表

set()函数
  通过对包含重复元素的列表调用set()，可以让Python找出列表中独一无二的元素，并使用这些元素来创建一
  个集合.

嵌套
  有时候，需要讲一系列字典储存在列表中，或者将列表作为值存储在字典中，这称之为嵌套。
  可以在列表中嵌套字典，在字典中嵌套列表甚至在字典中嵌套字典

函数input()的工作原理
  函数inpu()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其赋给一个变量，
  以方便你使用。
  message = input("Tell me something, and I will repeat it back to you: ")
  print(message)
 
  使用input()时，Python将用户输入解读为字符串。可以使用int()函数，它让Python讲输入视为数值。

break 退出循环
  立即退出while循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用break语句。
  break语句可用于控制程序流程，可用来控制那些代码将执行，那些代码不执行，从而让程序按照你的
  要求执行你要执行的代码。
  （任何Python循环中都可以使用break语句。例如使用break语句退出遍历列表或者字典的for循环）

循环中使用contiue
  要返回循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句。

----------------------------------
函数
  函数是带名字的代码块，用于完成具体的工作。要执行函数定义的特定任务时，可调用该函数。

定义函数
  使用def来告诉Python定义一个函数，指出函数名 	

可以向函数传递函数，例如
  def greet_user(username):
      print(f"Hello, {username.title()}! ")
  
  greet_user('jesse')

实参和形参
  在函数greet_user()的定义中，变量username是一个形参(parameter)，即函数完成工作所需的信息。
  在代码greet_user('jesse')中，值'jesse'是一个实参(argument)，即调用函数时传递给函数的信息。
在调用函数的时候，实参将值传递给了函数，这个值被赋予给了形参。

传递实参

  函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。向函数传递实参的方式有很多：
可使用位置实参，这要求实参的顺序和形参的顺序相同；也可使用关键字实参，其中每个实参都由变量名和
值组成；还可使用列表和字典。

位置实参
  调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的形参。最简单的关联方式是
基于实参的顺序。这种关联方式称为位置实参

def describe_pet(animal_type, pet_name):
  print(f"\nI have a {animal_tpye}")
  print(f"My {animal_type}'s name is {pet_name.title()}.")

describe_pet('hamster', 'harry')

这个函数的定义表明，它需要一种动物类型和一个名字，实参分别赋值给两个形参。
（位置实参方法中，如果实参的顺序不正确，结果可能出乎预料）

关键字实参
  关键字实参是传递给函数的名称值对。因为直接在实参中将名称和值关联起来，所以向函数传递实参时
不会混淆。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出函数调用中的各个值的用途。

def describe_pet(animal_type, pet_name):
   print(f"\nI have a {animal_tpye}")
   print(f"My {animal_type}'s name is {pet_name.title()}.")

describe_pet(animal_type='hamster', pet_name='harry')

关键字实参的顺序无关紧要，因为Python知道各个值该赋给哪个形参

默认值
  编写函数时，可给每个形参指定默认值。例如

def describe_pet(pet_name, animal_type='dog'):
   print(f"\nI have a {animal_tpye}")
   print(f"My {animal_type}'s name is {pet_name.title()}.")

describe_pet('willie')

注意：使用默认值时，必须先在形参列表中列出没有默认值的形参，再列出有默认值的实参。
  这让Python依然能够正确地解读位置实参

返回值
  函数并非总是显示输出，它还可以处理一些数据，并返回一个或者一组值。函数返回的值
称为返回值。在函数中，可使用return语句将值返回到调用函数的代码行。返回值让你能够
将程序的大部分繁重工作移到函数中完成，从而简化主程序。

返回字典
  函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。例如：

  def build_persion(first_name, last_name):
	  persion = {'first': first_name,'last': last_name}
	  return persion

  musician = build_persion('jimi', 'hendrix')
  print(musician)
