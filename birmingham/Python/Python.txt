字符串:
在Python中，用引号括起来的都是字符串，其中的引号可以是单引号也可以是双引号
    "This is a string."
    'This is also a string.'

删除空白：
rstrip()剔除末尾的空白
lstrip()剔除开头的空白
strip()同时剔除字符串两边的空白
    favorite_language = ‘python '
    favorite_language.rstrip()

数中的下划线：使其更加清晰易读
universe_age = 14_000_000
当打印的时候，Python不会打印其中的下划线

列表
bicycles = ['trek','cannodale','redline','specialized']
print(bicycles[0])
  在列表末尾添加元素
    motorcycles.append('ducati')
  在列表中插入元素
    motorcycles。insert(0,'ducati')
  在列表中使用del语句删除元素
    del motorcycles[0]
  使用方法pop()删除元素，pop()删除列表末尾的元素，并且让你能够接着使用它。
    popped_motorcycle = motorcycles.pop()
  弹出列表中任何位置处的元素
    popped_motorcycle = motorcycles.pop(0)  或者使用del语句
  根据值来删除元素
    motorcycles.remove('ducati')   (remove函数只会删除第一个指定的值，若要删除的值出现多次，则需要使用循环)

列表排序
  使用sort()对列表永久排序 //此修改是永久的
    cars.sort()  //列表将按照字母顺序排列，与字母顺序相反则可以使用： car.sort(reverse=True)
  使用函数sorted()对列表临时排序 //同时不影响它们在列表中的原始排列顺序
    print(sorted(cars))
  倒着打印列表 //不是按照与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序
    cars.reverse()

确定列表的长度
  使用函数len()
  len(cars)

列表的切片
  print(players[0:3])

创建数值列表
  range(1,5)只打印数1~4

使用range()创建数字列表
  numbers = list(range(1,6)) ----> 结果是 [1,2,3,4,5]
  numbers = list(range(2,11,2)) ----> 结果是[2,4,6,8,10]

对数字执行简单的统计计算
  digits=[1,2,3,4,5,6,7,8,9,0]
  min(digits)  ---->找最小值
  max(digits)  ---->找最大值
  sum(digits)  ---->求列表总和

列表和元组
  列表非常适合用于储存在程序运行期间可能变化的数据集。列表是可以修改的，这对处理网站的用户列表或游戏中的
  角色列表至关重要。然而，有时候需要创建一系列不可修改的元素，元组可以满足这种需求。Python将不能修改的值
  称为 不可变 的，而不可变的列表被称为元组。

  元组看起来很像列表，但使用圆括号而非中括号来标识。定义元组后，就可以使用索引来访问其元素，就像访问列表
  元素一样

修改元组变量
  虽然不能修改元组的元素，但是可以给存储元组的变量赋值。
  dimensions = (200,50)
  dimensions = (400,100)


条件测试
  两个大小写不同的值被视为不相等

if 语句格式
  if conditional_test:
      do something

字典
  字典是一种动态结构，可随时在其中添加键值对。要添加键值对，可依次字典名，用方括号括起来的键和相关连的值
  例如：
      alien_0 = {'color':'green','point':5}

	  alien_0['x_position'] = 0
	  alien_0['y_position'] = 25

删除键值对
  del alien_0['points']

使用get()来访问值
  在一定情况下会出现指定的键不存在的情况，这时候可以使用get()函数来处理
    方法get()的第一个参数用于指定键，是必不可少的；第二个参数为指定的键不存在时返回的一个默认值。
	point_value = alien_0.get('points','No point value assigned.')

遍历字典

1.for key, value in user_0.items()    //key value 就是对应的键值表
2.for name in favourite_languages.keys()    //name 就是所有的键表

set()函数
  通过对包含重复元素的列表调用set()，可以让Python找出列表中独一无二的元素，并使用这些元素来创建一
  个集合.

嵌套
  有时候，需要讲一系列字典储存在列表中，或者将列表作为值存储在字典中，这称之为嵌套。
  可以在列表中嵌套字典，在字典中嵌套列表甚至在字典中嵌套字典

函数input()的工作原理
  函数inpu()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其赋给一个变量，
  以方便你使用。
  message = input("Tell me something, and I will repeat it back to you: ")
  print(message)
 
  使用input()时，Python将用户输入解读为字符串。可以使用int()函数，它让Python讲输入视为数值。

break 退出循环
  立即退出while循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用break语句。
  break语句可用于控制程序流程，可用来控制那些代码将执行，那些代码不执行，从而让程序按照你的
  要求执行你要执行的代码。
  （任何Python循环中都可以使用break语句。例如使用break语句退出遍历列表或者字典的for循环）

循环中使用contiue
  要返回循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句。

----------------------------------
函数
  函数是带名字的代码块，用于完成具体的工作。要执行函数定义的特定任务时，可调用该函数。

定义函数
  使用def来告诉Python定义一个函数，指出函数名 	

可以向函数传递函数，例如
  def greet_user(username):
      print(f"Hello, {username.title()}! ")
  
  greet_user('jesse')

实参和形参
  在函数greet_user()的定义中，变量username是一个形参(parameter)，即函数完成工作所需的信息。
  在代码greet_user('jesse')中，值'jesse'是一个实参(argument)，即调用函数时传递给函数的信息。
在调用函数的时候，实参将值传递给了函数，这个值被赋予给了形参。

传递实参

  函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。向函数传递实参的方式有很多：
可使用位置实参，这要求实参的顺序和形参的顺序相同；也可使用关键字实参，其中每个实参都由变量名和
值组成；还可使用列表和字典。

位置实参
  调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的形参。最简单的关联方式是
基于实参的顺序。这种关联方式称为位置实参

def describe_pet(animal_type, pet_name):
  print(f"\nI have a {animal_tpye}")
  print(f"My {animal_type}'s name is {pet_name.title()}.")

describe_pet('hamster', 'harry')

这个函数的定义表明，它需要一种动物类型和一个名字，实参分别赋值给两个形参。
（位置实参方法中，如果实参的顺序不正确，结果可能出乎预料）

关键字实参
  关键字实参是传递给函数的名称值对。因为直接在实参中将名称和值关联起来，所以向函数传递实参时
不会混淆。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出函数调用中的各个值的用途。

def describe_pet(animal_type, pet_name):
   print(f"\nI have a {animal_tpye}")
   print(f"My {animal_type}'s name is {pet_name.title()}.")

describe_pet(animal_type='hamster', pet_name='harry')

关键字实参的顺序无关紧要，因为Python知道各个值该赋给哪个形参

默认值
  编写函数时，可给每个形参指定默认值。例如

def describe_pet(pet_name, animal_type='dog'):
   print(f"\nI have a {animal_tpye}")
   print(f"My {animal_type}'s name is {pet_name.title()}.")

describe_pet('willie')

注意：使用默认值时，必须先在形参列表中列出没有默认值的形参，再列出有默认值的实参。
  这让Python依然能够正确地解读位置实参

返回值
  函数并非总是显示输出，它还可以处理一些数据，并返回一个或者一组值。函数返回的值
称为返回值。在函数中，可使用return语句将值返回到调用函数的代码行。返回值让你能够
将程序的大部分繁重工作移到函数中完成，从而简化主程序。

返回字典
  函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。例如：

  def build_persion(first_name, last_name):
	  persion = {'first': first_name,'last': last_name}
	  return persion

  musician = build_persion('jimi', 'hendrix')
  print(musician)

<<<<<<< HEAD
传递任意数量的实参
  有时候不知道函数需要接受多少实参，好在Python允许函数从调用语句中收集任意
数量的实参，例如：
  def make_pizza(*toppings):
	  print("\nMaking a pizza with the following toppings:")
          for topping in toppings:
	      print(f" - {topping}")
  make_pizza('pepperoni')
  make_pizza('mushrooms', 'green peppers', 'extra cheese')

结和使用位置参数和任意数量实参
  如果要让函数接受不同类型的实参，必须在函数定义中将接纳人任意数量实参的
形参放在最后。Python先匹配位置实参和关键字实参，再将余下的实参都收集到最
后一个形参中。
=======
传递列表
  传递列表非常好用，将列表传递给函数后，函数就能直接访问其内容。例如：
  def greet_users(names):
      for name in names:
	      msg = f"Hello, {name.title()}!"
		  print(msg)
  
  usernames = ['hannah', 'try', 'margot']
  greet_users(usernames)

禁止函数修改列表
  有时候需要禁止函数修改列表，例如前面的那个例子，最后的unprinted_designs列表变成了空的。
为了解决这个问题，可以向函数传递列表的副本而非原件。这样，函数所做的任何修改都只影响副本，
而原件丝毫不受影响。

  将列表的副本传递给函数：
     function_name(list_name[:])
  切片表示法[:]创建列表的副本。在printing_models.py中，如果不想清空未打印完的设计列表可用
  下面这样调用：
     print_models(unprinted_designs[:], completed_models)

传递任意数量的实参
  有时候不知道函数需要接受多少实参，好在Python允许函数从调用语句中收集任意
数量的实参，例如：
  def make_pizza(*toppings):
	  print("\nMaking a pizza with the following toppings:")
          for topping in toppings:
	      print(f" - {topping}")
  make_pizza('pepperoni')
  make_pizza('mushrooms', 'green peppers', 'extra cheese')

结和使用位置参数和任意数量实参
  如果要让函数接受不同类型的实参，必须在函数定义中将接纳人任意数量实参的
形参放在最后。Python先匹配位置实参和关键字实参，再将余下的实参都收集到最
后一个形参中,例如：
  def make_pizza(pizza, *toppings):
	  print(f"\nMaking a {size}-inch pizza with the following topping:")
	  for topping in toppings:
	      print(f" - {topping}")
  make_pizza(16, 'pepperoni')
  make_pizza(16, 'mushrooms', 'green peppers', 'extra cheese')

使用任意数量的关键字实参
  有时候需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息。在这种
  情况下，可将函数编写成能够任意数量的键值对---调用语句提供了多少就接受多少。
  具体看user_profile.py文件

将函数存储到模块中
  使用函数的优点之一是可以将代码块和主程序分离。通过给函数制定描述性名称，可让主程序
  容易理解的多。还可以将函数存储在称为模块的独立文件中，再将模块导入到主程序中。
  import语句允许在当前运行的程序文件中使用模块中的代码。

导入整个模块
  模块是扩展名为.py的文件，包含要导入到程序中的代码。
  例如已有模块pizza.py，可以这么使用：
      import pizza
      pizza.make_pizza(16, 'pepperoni')
      ...
      ...

导入特定的函数
  from module_name import function_name, function_0, function_1, function_2
  例如：
      from pizza import make_pizza

使用as给函数制定别名
  如果要导入函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而
  独一无二的别名：函数的另一个名称，例如：
      from pizza import make_pizza as mp
      mp(16, 'pepperoni')

  其通用语法为： form module_name import function_name as fn

类似的，使用as给模块制定别名： import module_name as mn
导入模块中的所有函数： from module_name import *
  from pizza import *
  make_pizza(16, 'pepperoni')

  import 语句中的星号让Python将模块pizza中的每个函数都复制到这个程序文件中。由于导入
  每个函数，可通过名称来调用每个函数，而无需使用句点表达法。

第九章： 类
  面对面编程是最有效的软件编写方法之一。在面向对象编程中，你编写表示
  现实世界中的事物和情景的类，并基于这些类来创建对象。编写类时，你定
  义一大类对象都有的的通用行为。

  根据类来创建对象称之为实例化，这可以让你能够使用类的实例。

9.1 创建和使用类
  使用类几乎可以模拟任何东西。例如一个表示小狗的简单类Dog，它表达的
  不是特定的小狗，而是任何小狗。这个类让Python知道如何创建表达小狗的
  对象。编写这个类之后，我们将使用它来创建表示特定小狗的实例。

9.1.1 创建Dog类
  dog.py

9.1.2 根据类创建实例
  class Dog：
      --snip--
  my_dog = Dog('Willie', 6)
  1.访问属性
  要访问属性，可以使用句点表示法。
      my_dog.name
  2.调用方法
  根据Dog类创建实例后，就能使用句点表示法来调用Dog类中定义的任何方法了。
      my_dog.sit()
	  my_dog.roll_over()
  Python在类Dog中查找方法sit()并运行其代码。Python以同样的方式解读my_dog.roll_over()
  3.创建多个实例
  可以按照需求根据类创建任意数量的实例。
      my_dog = Dog('Wille', 6)
	  your_dog = Dog('Lucy', 3)

9.2 使用类和实例
  可使用类来模拟现实世界中的很多情景。类编写好后，你的大部分时间将花在根据类创建的实例
  上。你需要执行的一个重要任务就是修改实例的属性。可以直接修改实例的属性，也可以编写方
  法以特定的方式进行修改。

9.2.1 Car类
  编写以一个表示汽车的类。它存储了有关汽车的信息，还有一个汇总的这些的信息的方法：
    car.py

9.2.2 给属性指定默认值
  创建实例时，有些属性无须通过形参来定义，可在方法__init__()中为其指定默认值

9.2.3 修改属性的值
  我们可以通过三种方式修改属性的值：直接通过实例进行修改，通过方法进行设置，以及通过方法
  进行递增(增加特定的值)。
  1.直接修改属性的值
  要修改属性的值，最简单的方法就是通过实例直接访问它。
  my_new_car.odometer_reading = 23
  my_new_car.read_odometer()
  2.通过方法修改属性的值
  如果由方法能替你更新属性，将大有裨益。这样就无须直接访问属性，而可将值传递给方法， 由它
  在内部进行更新。例如：
  class Car:
      --snip--
	  def update_odometer(self, mileage):
	      """将里程表读数设置为指定的值"""
		  self.odometer_reading = mileage
  my_new_car.update_odometer(23)
  my_new_car.read_odometer()
  ##其本质还是直接修改属性的值（个人认为）##
  3.通过方法对属性的值进行递增
  有时候需要将属性值递增特定的量，而不是将其设置为全新的值。例如：
  class Car:
      --snip--

	  def update_odometer(self,mileage):
	      --snip--
	  def increment_odometer(self,miles):
	      """将里程表读数增加指定的量"""
		  self.odometer_reading += miles

9.3 继承
  编写类时，并非总是要从空白开始。如果要编写的类是另一个现成类的特殊版本，可使用继承。一个类继承
  另一个类时，将自动获得另一个类的所有属性和方法。原有的类称为父类，而新类称为子类。子类继承父类
  的所有属性和方法，同时还可以定义自己的属性和方法。

9.3.1 子类的方法 __init__()
  在既有类的基础上编写新类时，通常要调用父类的方法__init__()。这将初始化在父类__init__()方法中定
  义的所有属性，从而让子类包含这些属性。
  electric_car.py

9.3.2 给子类定义属性和方法
  让一个类继承另一个类后，就可以添加区分子类和父类所需的新属性和新方法了。
  同见 electric_car.py

9.3.3 重写父类的方法
  对于父类的方法，只要它不符合子类模拟的实物的行为，都可以进行重写。为此，可在子类中定义一个与要
  重写的父类方法同名的方法。这样，Python将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。
    假设Car类有一个名为fill_gas_tank()的方法，它对全电动汽车来说毫无意义，因此可以重写它。
	class ElectricCar(Car):
	    --snip--
		def fill_gas_tank(self):
		    """电动汽车没有油箱"""
			print("This car doesn't need a gas tank!")
  现在，如果有人对电动汽车调用方法fill_gas_tank()， Python将忽略Car类中的方法fill_gas_tank()，转
  而运行上述代码。使用继承时，可让子类保留从父类继承而来的精华，并剔除不需要的糟粕。

9.3.4 将实例用作属性
  使用代码模拟实物时，可能会发现类中的细节越来越多：属性和方法清单以及文件都越来越长。在这种情况下，
  可能需要将类的一部分提取出来，作为一个独立的类。例如：
  class Car:
      --snip--

  class Battery:

      def __init__(self, batter_size=75):
	      self.battery_size = battery_size

	  def describe_battery(self):
	      print(f"This car has a {self.battery_size}-kWh battery.")

  class ElectricCar(Car):

      def __init__(self, make, model, year):
	      super().battery = Battery()

  my_tesla.battery.describe_battery()
  (个人觉得就是主类的衍生，犹如嵌套)

9.4 导入类
  随着不断给类添加功能，文件可能会变得很长。为了遵循Python的总体理念，应该让文件尽可能整洁，Python
  允许将类存储在模块。

9.4.1 导入单个类
  使用模块的程序必须使用更加具体的文件名。例如：
  from car import Car。
  这样，我们就可以使用Car类，就像他是在这个文件定义的一样。

9.4.2 在一个模块中存储多个类
  虽然同一个模块中的类之间应该存在某种相关性，但可以根据需要在一个模块中存储任意数量的类。
  from car import ElectricCar
  
9.4.3 从一个模块中导入多个类
  可根据需要在程序文件中导入任意数量的类。如果要在同一个程序中个创建普通汽车和电动汽车，就
  需要将Car类和ElectricCar类都导入：
  from car import Car， ElectricCar

9.4.4 导入整个模块
  还可以导入整个模块，在使用句点表示法访问需要的类。
  import car

  my_beetle = car.Car('volkswagen', 'beetle', 2019)
  my_tesla = car.ElectricCar('tesla', 'roadster', 2019)

9.4.5 导入模块中的所有类
  from module_name import *
  
  不推荐使用这种导入方式，一是只看文件开头的import语句，就清楚地知道程序使用了哪些类，这种方式
  没有明确指出使用模块中的哪些类。二是这种方式还可能引发名称方面的迷惑。

9.4.6 在一个模块中导入另一个模块
  有时候，需要将类分散到多个模块，以免模块太大或者在同一个模块中存储不相关的类。将类存储在多个
  模块中，你可能发信一个模块中的类依赖于另一个模块中的类。

  在electric_car.py中：
  from car import Car

  class Battery：
      --snip--

  class ElectricCar(Car):
      --snip--

9.4.7 使用别名
  from electric_car import ElectricCar as EC

  my_tesla = EC('tesla', 'roadster', 2019)

9.5 Python标准库
  Python标注库是一组模块，我们安装的Python都包含它。例如：
  from random import randint

10 文件和异常

10.1 从文件中读取数据
  文本文件可存储的数据量多得难以置信：天气数据，交通数据，社会经济数据，文学作品等。每当需要分析
  或者修改存储在文件中的信息时，读取文件都很有用，对数据分析应用程序来说尤其如此。

10.1.1 读取整个文件
  要读取文件，需要一个包含几行文本的文件。例如pi_digits.txt
  
  open()：打开并且访问文件。open函数接受一个参数：要打开的文件的名称。Python在当前执行的文件所在
  的目录查找指定的文件。其会返回一个表示文件的对象。Python将该对象赋给file_object供以后使用

  关键字with在不再需要访问文件后将其关闭。我们也可以调用open()和close()来打开和关闭文件。

  相比于原始文件，该输出唯一不同的地方时末尾多了一个空行。这是因为read()到达文件末尾时返回一个空字
  符串，而将这个空字符串现实出来时就是一个空行。若要删除，可以使用：
      print(contents.rstrip())

10.1.2 文件路径
  根据组织文件的方式，有时可能要打开不再程序文件所属目录中的文件。这时，需要提供文件路径，让Python
  到指定的位置去查找。

  相对路径：
      text_files/filname.txt

  绝对文件路径：
      /home/ehmatthes/other_files/text_files/filename.txt

10.1.3 逐行读取
  读取文件时，常常需要姜茶其中的每一行：可能要在文件中查找特定的信息，或者要以某种方式修改文件中的文
  本。可以对文件使用for循环：
  
  with open(filename) as file_object:
      for line in file_object:
	      print(line)
  
10.1.4 创建一个包含文件各行内容的列表
  使用关键字with时，open函数返回的文件对象只能在with代码块中使用。如果要在with代码块外访问文件的内容，
  可在with代码块内将文件的各行存储在一个列表，并在with代码块使用该列表。例如：

  with open(filename) as file_object:
      lines = file_object.readlines()

  for line in lines:
      print(line.rstrip())
