字符串:
在Python中，用引号括起来的都是字符串，其中的引号可以是单引号也可以是双引号
    "This is a string."
    'This is also a string.'

删除空白：
rstrip()剔除末尾的空白
lstrip()剔除开头的空白
strip()同时剔除字符串两边的空白
    favorite_language = ‘python '
    favorite_language.rstrip()

数中的下划线：使其更加清晰易读
universe_age = 14_000_000
当打印的时候，Python不会打印其中的下划线

列表
bicycles = ['trek','cannodale','redline','specialized']
print(bicycles[0])
  在列表末尾添加元素
    motorcycles.append('ducati')
  在列表中插入元素
    motorcycles。insert(0,'ducati')
  在列表中使用del语句删除元素
    del motorcycles[0]
  使用方法pop()删除元素，pop()删除列表末尾的元素，并且让你能够接着使用它。
    popped_motorcycle = motorcycles.pop()
  弹出列表中任何位置处的元素
    popped_motorcycle = motorcycles.pop(0)  或者使用del语句
  根据值来删除元素
    motorcycles.remove('ducati')   (remove函数只会删除第一个指定的值，若要删除的值出现多次，则需要使用循环)

列表排序
  使用sort()对列表永久排序 //此修改是永久的
    cars.sort()  //列表将按照字母顺序排列，与字母顺序相反则可以使用： car.sort(reverse=True)
  使用函数sorted()对列表临时排序 //同时不影响它们在列表中的原始排列顺序
    print(sorted(cars))
  倒着打印列表 //不是按照与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序
    cars.reverse()

确定列表的长度
  使用函数len()
  len(cars)

列表的切片
  print(players[0:3])

创建数值列表
  range(1,5)只打印数1~4

使用range()创建数字列表
  numbers = list(range(1,6)) ----> 结果是 [1,2,3,4,5]
  numbers = list(range(2,11,2)) ----> 结果是[2,4,6,8,10]

对数字执行简单的统计计算
  digits=[1,2,3,4,5,6,7,8,9,0]
  min(digits)  ---->找最小值
  max(digits)  ---->找最大值
  sum(digits)  ---->求列表总和

列表和元组
  列表非常适合用于储存在程序运行期间可能变化的数据集。列表是可以修改的，这对处理网站的用户列表或游戏中的
  角色列表至关重要。然而，有时候需要创建一系列不可修改的元素，元组可以满足这种需求。Python将不能修改的值
  称为 不可变 的，而不可变的列表被称为元组。

  元组看起来很像列表，但使用圆括号而非中括号来标识。定义元组后，就可以使用索引来访问其元素，就像访问列表
  元素一样

修改元组变量
  虽然不能修改元组的元素，但是可以给存储元组的变量赋值。
  dimensions = (200,50)
  dimensions = (400,100)












